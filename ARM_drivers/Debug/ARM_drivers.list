
ARM_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ce8  08000cf0  00010cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ce8  08000ce8  00010cf0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ce8  08000ce8  00010cf0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ce8  08000cf0  00010cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce8  08000ce8  00010ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cec  08000cec  00010cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000cf0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000cf0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010cf0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010d19  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007bf  00000000  00000000  00010d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003bd  00000000  00000000  0001151b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  000118d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b9  00000000  00000000  000119e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000622  00000000  00000000  00011aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000073e  00000000  00000000  000120c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003f7c  00000000  00000000  00012801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000370  00000000  00000000  00016780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00016af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cd0 	.word	0x08000cd0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000cd0 	.word	0x08000cd0

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <GPIO_voidSetPinMode>:
#include "STD_Types.h"
#include "GPIO_private.h"
#include "GPIO_config.h"
#include "GPIO_interface.h"

void GPIO_voidSetPinMode(u8 A_u8PortID,u8 A_u8PinNo,u8 A_u8Direction,u8 A_u8Mode){
 800066c:	b490      	push	{r4, r7}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4604      	mov	r4, r0
 8000674:	4608      	mov	r0, r1
 8000676:	4611      	mov	r1, r2
 8000678:	461a      	mov	r2, r3
 800067a:	4623      	mov	r3, r4
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	4603      	mov	r3, r0
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	460b      	mov	r3, r1
 8000684:	717b      	strb	r3, [r7, #5]
 8000686:	4613      	mov	r3, r2
 8000688:	713b      	strb	r3, [r7, #4]

	switch(A_u8PortID){
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b02      	cmp	r3, #2
 800068e:	f000 80a4 	beq.w	80007da <GPIO_voidSetPinMode+0x16e>
 8000692:	2b02      	cmp	r3, #2
 8000694:	f300 80ef 	bgt.w	8000876 <GPIO_voidSetPinMode+0x20a>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <GPIO_voidSetPinMode+0x36>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d04e      	beq.n	800073e <GPIO_voidSetPinMode+0xd2>
				GPIOC->CRH |= (A_u8Direction << (A_u8PinNo*NIBBLE_SIZE));
				GPIOC->CRH |= (A_u8Mode << ((A_u8PinNo*NIBBLE_SIZE)+2));
			}
			break;
	}
}
 80006a0:	e0e9      	b.n	8000876 <GPIO_voidSetPinMode+0x20a>
			if(A_u8PinNo < 8){
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	2b07      	cmp	r3, #7
 80006a6:	d823      	bhi.n	80006f0 <GPIO_voidSetPinMode+0x84>
				GPIOA->CRL &= ~(FOUR_BITS_HIGH << (A_u8PinNo*NIBBLE_SIZE));
 80006a8:	4b75      	ldr	r3, [pc, #468]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	79ba      	ldrb	r2, [r7, #6]
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	210f      	movs	r1, #15
 80006b2:	fa01 f202 	lsl.w	r2, r1, r2
 80006b6:	43d2      	mvns	r2, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a71      	ldr	r2, [pc, #452]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 80006bc:	400b      	ands	r3, r1
 80006be:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= (A_u8Direction << (A_u8PinNo*NIBBLE_SIZE));
 80006c0:	4b6f      	ldr	r3, [pc, #444]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	7979      	ldrb	r1, [r7, #5]
 80006c6:	79ba      	ldrb	r2, [r7, #6]
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a6b      	ldr	r2, [pc, #428]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= (A_u8Mode << ((A_u8PinNo*NIBBLE_SIZE)+2));
 80006d6:	4b6a      	ldr	r3, [pc, #424]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	7939      	ldrb	r1, [r7, #4]
 80006dc:	79ba      	ldrb	r2, [r7, #6]
 80006de:	0092      	lsls	r2, r2, #2
 80006e0:	3202      	adds	r2, #2
 80006e2:	fa01 f202 	lsl.w	r2, r1, r2
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a65      	ldr	r2, [pc, #404]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	6013      	str	r3, [r2, #0]
			break;
 80006ee:	e0c2      	b.n	8000876 <GPIO_voidSetPinMode+0x20a>
				A_u8PinNo -= 8;
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	3b08      	subs	r3, #8
 80006f4:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~(FOUR_BITS_HIGH << (A_u8PinNo*NIBBLE_SIZE));
 80006f6:	4b62      	ldr	r3, [pc, #392]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	79ba      	ldrb	r2, [r7, #6]
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	210f      	movs	r1, #15
 8000700:	fa01 f202 	lsl.w	r2, r1, r2
 8000704:	43d2      	mvns	r2, r2
 8000706:	4611      	mov	r1, r2
 8000708:	4a5d      	ldr	r2, [pc, #372]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 800070a:	400b      	ands	r3, r1
 800070c:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= (A_u8Direction << (A_u8PinNo*NIBBLE_SIZE));
 800070e:	4b5c      	ldr	r3, [pc, #368]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	7979      	ldrb	r1, [r7, #5]
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	0092      	lsls	r2, r2, #2
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	4611      	mov	r1, r2
 800071e:	4a58      	ldr	r2, [pc, #352]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 8000720:	430b      	orrs	r3, r1
 8000722:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= (A_u8Mode << ((A_u8PinNo*NIBBLE_SIZE)+2));
 8000724:	4b56      	ldr	r3, [pc, #344]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	7939      	ldrb	r1, [r7, #4]
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	0092      	lsls	r2, r2, #2
 800072e:	3202      	adds	r2, #2
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	4611      	mov	r1, r2
 8000736:	4a52      	ldr	r2, [pc, #328]	; (8000880 <GPIO_voidSetPinMode+0x214>)
 8000738:	430b      	orrs	r3, r1
 800073a:	6053      	str	r3, [r2, #4]
			break;
 800073c:	e09b      	b.n	8000876 <GPIO_voidSetPinMode+0x20a>
			if(A_u8PinNo < 8){
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	2b07      	cmp	r3, #7
 8000742:	d823      	bhi.n	800078c <GPIO_voidSetPinMode+0x120>
				GPIOB->CRL &= ~(FOUR_BITS_HIGH << (A_u8PinNo*NIBBLE_SIZE));
 8000744:	4b4f      	ldr	r3, [pc, #316]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	79ba      	ldrb	r2, [r7, #6]
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	210f      	movs	r1, #15
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	43d2      	mvns	r2, r2
 8000754:	4611      	mov	r1, r2
 8000756:	4a4b      	ldr	r2, [pc, #300]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 8000758:	400b      	ands	r3, r1
 800075a:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= (A_u8Direction << (A_u8PinNo*NIBBLE_SIZE));
 800075c:	4b49      	ldr	r3, [pc, #292]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	7979      	ldrb	r1, [r7, #5]
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	0092      	lsls	r2, r2, #2
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	4611      	mov	r1, r2
 800076c:	4a45      	ldr	r2, [pc, #276]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 800076e:	430b      	orrs	r3, r1
 8000770:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= (A_u8Mode << ((A_u8PinNo*NIBBLE_SIZE)+2));
 8000772:	4b44      	ldr	r3, [pc, #272]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7939      	ldrb	r1, [r7, #4]
 8000778:	79ba      	ldrb	r2, [r7, #6]
 800077a:	0092      	lsls	r2, r2, #2
 800077c:	3202      	adds	r2, #2
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a3f      	ldr	r2, [pc, #252]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 8000786:	430b      	orrs	r3, r1
 8000788:	6013      	str	r3, [r2, #0]
			break;
 800078a:	e074      	b.n	8000876 <GPIO_voidSetPinMode+0x20a>
				A_u8PinNo -= 8;
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	3b08      	subs	r3, #8
 8000790:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~(FOUR_BITS_HIGH << (A_u8PinNo*NIBBLE_SIZE));
 8000792:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	0092      	lsls	r2, r2, #2
 800079a:	210f      	movs	r1, #15
 800079c:	fa01 f202 	lsl.w	r2, r1, r2
 80007a0:	43d2      	mvns	r2, r2
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a37      	ldr	r2, [pc, #220]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 80007a6:	400b      	ands	r3, r1
 80007a8:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= (A_u8Direction << (A_u8PinNo*NIBBLE_SIZE));
 80007aa:	4b36      	ldr	r3, [pc, #216]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	7979      	ldrb	r1, [r7, #5]
 80007b0:	79ba      	ldrb	r2, [r7, #6]
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	4611      	mov	r1, r2
 80007ba:	4a32      	ldr	r2, [pc, #200]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 80007bc:	430b      	orrs	r3, r1
 80007be:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= (A_u8Mode << ((A_u8PinNo*NIBBLE_SIZE)+2));
 80007c0:	4b30      	ldr	r3, [pc, #192]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	7939      	ldrb	r1, [r7, #4]
 80007c6:	79ba      	ldrb	r2, [r7, #6]
 80007c8:	0092      	lsls	r2, r2, #2
 80007ca:	3202      	adds	r2, #2
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	4611      	mov	r1, r2
 80007d2:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <GPIO_voidSetPinMode+0x218>)
 80007d4:	430b      	orrs	r3, r1
 80007d6:	6053      	str	r3, [r2, #4]
			break;
 80007d8:	e04d      	b.n	8000876 <GPIO_voidSetPinMode+0x20a>
			if(A_u8PinNo < 8){
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	2b07      	cmp	r3, #7
 80007de:	d823      	bhi.n	8000828 <GPIO_voidSetPinMode+0x1bc>
				GPIOC->CRL &= ~(FOUR_BITS_HIGH << (A_u8PinNo*NIBBLE_SIZE));
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	79ba      	ldrb	r2, [r7, #6]
 80007e6:	0092      	lsls	r2, r2, #2
 80007e8:	210f      	movs	r1, #15
 80007ea:	fa01 f202 	lsl.w	r2, r1, r2
 80007ee:	43d2      	mvns	r2, r2
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 80007f4:	400b      	ands	r3, r1
 80007f6:	6013      	str	r3, [r2, #0]
				GPIOC->CRL |= (A_u8Direction << (A_u8PinNo*NIBBLE_SIZE));
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	7979      	ldrb	r1, [r7, #5]
 80007fe:	79ba      	ldrb	r2, [r7, #6]
 8000800:	0092      	lsls	r2, r2, #2
 8000802:	fa01 f202 	lsl.w	r2, r1, r2
 8000806:	4611      	mov	r1, r2
 8000808:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 800080a:	430b      	orrs	r3, r1
 800080c:	6013      	str	r3, [r2, #0]
				GPIOC->CRL |= (A_u8Mode << ((A_u8PinNo*NIBBLE_SIZE)+2));
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	7939      	ldrb	r1, [r7, #4]
 8000814:	79ba      	ldrb	r2, [r7, #6]
 8000816:	0092      	lsls	r2, r2, #2
 8000818:	3202      	adds	r2, #2
 800081a:	fa01 f202 	lsl.w	r2, r1, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a19      	ldr	r2, [pc, #100]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 8000822:	430b      	orrs	r3, r1
 8000824:	6013      	str	r3, [r2, #0]
			break;
 8000826:	e025      	b.n	8000874 <GPIO_voidSetPinMode+0x208>
				A_u8PinNo -= 8;
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	3b08      	subs	r3, #8
 800082c:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~(FOUR_BITS_HIGH << (A_u8PinNo*NIBBLE_SIZE));
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	210f      	movs	r1, #15
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	43d2      	mvns	r2, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a11      	ldr	r2, [pc, #68]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 8000842:	400b      	ands	r3, r1
 8000844:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= (A_u8Direction << (A_u8PinNo*NIBBLE_SIZE));
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	7979      	ldrb	r1, [r7, #5]
 800084c:	79ba      	ldrb	r2, [r7, #6]
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	4611      	mov	r1, r2
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 8000858:	430b      	orrs	r3, r1
 800085a:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= (A_u8Mode << ((A_u8PinNo*NIBBLE_SIZE)+2));
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	7939      	ldrb	r1, [r7, #4]
 8000862:	79ba      	ldrb	r2, [r7, #6]
 8000864:	0092      	lsls	r2, r2, #2
 8000866:	3202      	adds	r2, #2
 8000868:	fa01 f202 	lsl.w	r2, r1, r2
 800086c:	4611      	mov	r1, r2
 800086e:	4a06      	ldr	r2, [pc, #24]	; (8000888 <GPIO_voidSetPinMode+0x21c>)
 8000870:	430b      	orrs	r3, r1
 8000872:	6053      	str	r3, [r2, #4]
			break;
 8000874:	bf00      	nop
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bc90      	pop	{r4, r7}
 800087e:	4770      	bx	lr
 8000880:	40010800 	.word	0x40010800
 8000884:	40010c00 	.word	0x40010c00
 8000888:	40011000 	.word	0x40011000

0800088c <GPIO_voidSetPinValue>:
	}

	return data;
}

void GPIO_voidSetPinValue(u8 A_u8PortID,u8 A_u8PinNo,u8 A_u8PinValue){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	460b      	mov	r3, r1
 8000898:	71bb      	strb	r3, [r7, #6]
 800089a:	4613      	mov	r3, r2
 800089c:	717b      	strb	r3, [r7, #5]

	switch(A_u8PortID){
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d040      	beq.n	8000926 <GPIO_voidSetPinValue+0x9a>
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	dc60      	bgt.n	800096a <GPIO_voidSetPinValue+0xde>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <GPIO_voidSetPinValue+0x26>
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d01d      	beq.n	80008ec <GPIO_voidSetPinValue+0x60>
			}else if(A_u8PinValue == GPIO_HIGH){
				SET_BIT(GPIOC->ODR,A_u8PinNo);
			}
			break;
	}
}
 80008b0:	e05b      	b.n	800096a <GPIO_voidSetPinValue+0xde>
			if(A_u8PinValue == GPIO_LOW){
 80008b2:	797b      	ldrb	r3, [r7, #5]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10b      	bne.n	80008d0 <GPIO_voidSetPinValue+0x44>
				CLR_BIT(GPIOA->ODR,A_u8PinNo);
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <GPIO_voidSetPinValue+0xe8>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	79ba      	ldrb	r2, [r7, #6]
 80008be:	2101      	movs	r1, #1
 80008c0:	fa01 f202 	lsl.w	r2, r1, r2
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <GPIO_voidSetPinValue+0xe8>)
 80008ca:	400b      	ands	r3, r1
 80008cc:	60d3      	str	r3, [r2, #12]
			break;
 80008ce:	e047      	b.n	8000960 <GPIO_voidSetPinValue+0xd4>
			}else if(A_u8PinValue == GPIO_HIGH){
 80008d0:	797b      	ldrb	r3, [r7, #5]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d144      	bne.n	8000960 <GPIO_voidSetPinValue+0xd4>
				SET_BIT(GPIOA->ODR,A_u8PinNo);
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <GPIO_voidSetPinValue+0xe8>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	79ba      	ldrb	r2, [r7, #6]
 80008dc:	2101      	movs	r1, #1
 80008de:	fa01 f202 	lsl.w	r2, r1, r2
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a23      	ldr	r2, [pc, #140]	; (8000974 <GPIO_voidSetPinValue+0xe8>)
 80008e6:	430b      	orrs	r3, r1
 80008e8:	60d3      	str	r3, [r2, #12]
			break;
 80008ea:	e039      	b.n	8000960 <GPIO_voidSetPinValue+0xd4>
			if(A_u8PinValue == GPIO_LOW){
 80008ec:	797b      	ldrb	r3, [r7, #5]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10b      	bne.n	800090a <GPIO_voidSetPinValue+0x7e>
				CLR_BIT(GPIOB->ODR,A_u8PinNo);
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <GPIO_voidSetPinValue+0xec>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	43d2      	mvns	r2, r2
 8000900:	4611      	mov	r1, r2
 8000902:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <GPIO_voidSetPinValue+0xec>)
 8000904:	400b      	ands	r3, r1
 8000906:	60d3      	str	r3, [r2, #12]
			break;
 8000908:	e02c      	b.n	8000964 <GPIO_voidSetPinValue+0xd8>
			}else if(A_u8PinValue == GPIO_HIGH){
 800090a:	797b      	ldrb	r3, [r7, #5]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d129      	bne.n	8000964 <GPIO_voidSetPinValue+0xd8>
				SET_BIT(GPIOB->ODR,A_u8PinNo);
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <GPIO_voidSetPinValue+0xec>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	79ba      	ldrb	r2, [r7, #6]
 8000916:	2101      	movs	r1, #1
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	4611      	mov	r1, r2
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <GPIO_voidSetPinValue+0xec>)
 8000920:	430b      	orrs	r3, r1
 8000922:	60d3      	str	r3, [r2, #12]
			break;
 8000924:	e01e      	b.n	8000964 <GPIO_voidSetPinValue+0xd8>
			if(A_u8PinValue == GPIO_LOW){
 8000926:	797b      	ldrb	r3, [r7, #5]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10b      	bne.n	8000944 <GPIO_voidSetPinValue+0xb8>
				CLR_BIT(GPIOC->ODR,A_u8PinNo);
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <GPIO_voidSetPinValue+0xf0>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	79ba      	ldrb	r2, [r7, #6]
 8000932:	2101      	movs	r1, #1
 8000934:	fa01 f202 	lsl.w	r2, r1, r2
 8000938:	43d2      	mvns	r2, r2
 800093a:	4611      	mov	r1, r2
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <GPIO_voidSetPinValue+0xf0>)
 800093e:	400b      	ands	r3, r1
 8000940:	60d3      	str	r3, [r2, #12]
			break;
 8000942:	e011      	b.n	8000968 <GPIO_voidSetPinValue+0xdc>
			}else if(A_u8PinValue == GPIO_HIGH){
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d10e      	bne.n	8000968 <GPIO_voidSetPinValue+0xdc>
				SET_BIT(GPIOC->ODR,A_u8PinNo);
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <GPIO_voidSetPinValue+0xf0>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	79ba      	ldrb	r2, [r7, #6]
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	4611      	mov	r1, r2
 8000958:	4a08      	ldr	r2, [pc, #32]	; (800097c <GPIO_voidSetPinValue+0xf0>)
 800095a:	430b      	orrs	r3, r1
 800095c:	60d3      	str	r3, [r2, #12]
			break;
 800095e:	e003      	b.n	8000968 <GPIO_voidSetPinValue+0xdc>
			break;
 8000960:	bf00      	nop
 8000962:	e002      	b.n	800096a <GPIO_voidSetPinValue+0xde>
			break;
 8000964:	bf00      	nop
 8000966:	e000      	b.n	800096a <GPIO_voidSetPinValue+0xde>
			break;
 8000968:	bf00      	nop
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	40010800 	.word	0x40010800
 8000978:	40010c00 	.word	0x40010c00
 800097c:	40011000 	.word	0x40011000

08000980 <GPIO_voidTogglePinValue>:

void GPIO_voidTogglePinValue(u8 A_u8PortID,u8 A_u8PinNo){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	460a      	mov	r2, r1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	4613      	mov	r3, r2
 800098e:	71bb      	strb	r3, [r7, #6]

	switch(A_u8PortID){
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d01c      	beq.n	80009d0 <GPIO_voidTogglePinValue+0x50>
 8000996:	2b02      	cmp	r3, #2
 8000998:	dc25      	bgt.n	80009e6 <GPIO_voidTogglePinValue+0x66>
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <GPIO_voidTogglePinValue+0x24>
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d00b      	beq.n	80009ba <GPIO_voidTogglePinValue+0x3a>
			break;
		case GPIO_PORTC:
			TOG_BIT(GPIOC->ODR,A_u8PinNo);
			break;
	}
}
 80009a2:	e020      	b.n	80009e6 <GPIO_voidTogglePinValue+0x66>
			TOG_BIT(GPIOA->ODR,A_u8PinNo);
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <GPIO_voidTogglePinValue+0x70>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	79ba      	ldrb	r2, [r7, #6]
 80009aa:	2101      	movs	r1, #1
 80009ac:	fa01 f202 	lsl.w	r2, r1, r2
 80009b0:	4611      	mov	r1, r2
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <GPIO_voidTogglePinValue+0x70>)
 80009b4:	404b      	eors	r3, r1
 80009b6:	60d3      	str	r3, [r2, #12]
			break;
 80009b8:	e015      	b.n	80009e6 <GPIO_voidTogglePinValue+0x66>
			TOG_BIT(GPIOB->ODR,A_u8PinNo);
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <GPIO_voidTogglePinValue+0x74>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	79ba      	ldrb	r2, [r7, #6]
 80009c0:	2101      	movs	r1, #1
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	4611      	mov	r1, r2
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <GPIO_voidTogglePinValue+0x74>)
 80009ca:	404b      	eors	r3, r1
 80009cc:	60d3      	str	r3, [r2, #12]
			break;
 80009ce:	e00a      	b.n	80009e6 <GPIO_voidTogglePinValue+0x66>
			TOG_BIT(GPIOC->ODR,A_u8PinNo);
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <GPIO_voidTogglePinValue+0x78>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	79ba      	ldrb	r2, [r7, #6]
 80009d6:	2101      	movs	r1, #1
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	4611      	mov	r1, r2
 80009de:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <GPIO_voidTogglePinValue+0x78>)
 80009e0:	404b      	eors	r3, r1
 80009e2:	60d3      	str	r3, [r2, #12]
			break;
 80009e4:	bf00      	nop
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40010800 	.word	0x40010800
 80009f4:	40010c00 	.word	0x40010c00
 80009f8:	40011000 	.word	0x40011000

080009fc <RCC_voidInitialize>:
#include "RCC_private.h"
#include "RCC_config.h"
#include "RCC_interface.h"


void RCC_voidInitialize(){
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	
#if HSI_CLOCK_STATUS == RCC_ENABLE
	SET_BIT(RCC->CR,HSION);
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]
	while(!GET_BIT(RCC->CR,HSIRDY));
 8000a0c:	bf00      	nop
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0fa      	beq.n	8000a0e <RCC_voidInitialize+0x12>
	RCC->CFGR |= (PLL_MUL_FACTOR<<PLLMUL);
	RCC->CFGR |= (HSE_divider_for_PLL<<PLLXTPRE);
	RCC->CFGR |= (PLL_SOURCE<<PLLSRC);
#endif

	RCC->CR |= (Clock_security_system_STATUS<<CSSON);
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a22:	6013      	str	r3, [r2, #0]

	RCC->CFGR |= (MCO_SOURCE<<MCO);
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a2e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (USB_PRESCALER<<USBPRE);
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= (ADC_PRESCALER<<ADCPRE);
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (APB2_PRESCALER<<PPRE2);
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (APB1_PRESCALER<<PPRE1);
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a4a:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (AHB_PRESCALER<<HPRE);
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= (CLOCK_SOURCE<<SW);
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	6053      	str	r3, [r2, #4]
	while(((RCC->CFGR>>SWS)&0b11) != CLOCK_SOURCE);
 8000a60:	bf00      	nop
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <RCC_voidInitialize+0x80>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f8      	bne.n	8000a62 <RCC_voidInitialize+0x66>
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <RCC_vEnablePeripheralClock>:

void RCC_vEnablePeripheralClock(u8 Copy_u8Bus,u8 Copy_u8preipheral){
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	71bb      	strb	r3, [r7, #6]

	switch(Copy_u8Bus){
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d01c      	beq.n	8000ad0 <RCC_vEnablePeripheralClock+0x50>
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	dc25      	bgt.n	8000ae6 <RCC_vEnablePeripheralClock+0x66>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <RCC_vEnablePeripheralClock+0x24>
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d00b      	beq.n	8000aba <RCC_vEnablePeripheralClock+0x3a>
			break;
		case RCC_APB2:
			SET_BIT(RCC->APB2ENR,Copy_u8preipheral);
			break;
	}
}
 8000aa2:	e020      	b.n	8000ae6 <RCC_vEnablePeripheralClock+0x66>
			SET_BIT(RCC->AHBENR,Copy_u8preipheral);
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <RCC_vEnablePeripheralClock+0x70>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	79ba      	ldrb	r2, [r7, #6]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <RCC_vEnablePeripheralClock+0x70>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6153      	str	r3, [r2, #20]
			break;
 8000ab8:	e015      	b.n	8000ae6 <RCC_vEnablePeripheralClock+0x66>
			SET_BIT(RCC->APB1ENR,Copy_u8preipheral);
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <RCC_vEnablePeripheralClock+0x70>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	79ba      	ldrb	r2, [r7, #6]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <RCC_vEnablePeripheralClock+0x70>)
 8000aca:	430b      	orrs	r3, r1
 8000acc:	61d3      	str	r3, [r2, #28]
			break;
 8000ace:	e00a      	b.n	8000ae6 <RCC_vEnablePeripheralClock+0x66>
			SET_BIT(RCC->APB2ENR,Copy_u8preipheral);
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <RCC_vEnablePeripheralClock+0x70>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	79ba      	ldrb	r2, [r7, #6]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	4611      	mov	r1, r2
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <RCC_vEnablePeripheralClock+0x70>)
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	6193      	str	r3, [r2, #24]
			break;
 8000ae4:	bf00      	nop
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000

08000af4 <SysTik_voidInitialize>:
#include "SysTik_interface.h"

void (*SysTik_GPFun)(void);
u8 L_u8PeriodicFlag;

void SysTik_voidInitialize(){
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

	SysTik->CTRL |= (SysTik_CLOCK_SOURCE << CLKSOURCE);
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SysTik_voidInitialize+0x20>)
 8000afa:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <SysTik_voidInitialize+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6013      	str	r3, [r2, #0]

	SysTik->CTRL |= (SysTik_INTERRUPT_STATUS << TICK_INT);
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <SysTik_voidInitialize+0x20>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <SysTik_voidInitialize+0x20>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <SysTik_voidSetIntervalms_Periodic>:
	SysTik->CTRL |= (SysTik_INTERRUPT_STATUS << TICK_INT);
	SET_BIT(SysTik->CTRL,ENABLE);
	SysTik_GPFun = ptr;
}

void SysTik_voidSetIntervalms_Periodic(u32 A_u32Time_ms,void(*ptr)(void)){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	u32 L_TimerFrequency;
	f32 L_TickTime;
	u32 L_Tick_No;

	CLR_BIT(SysTik->CTRL,ENABLE);
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <SysTik_voidSetIntervalms_Periodic+0x84>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <SysTik_voidSetIntervalms_Periodic+0x84>)
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	6013      	str	r3, [r2, #0]
	L_u8PeriodicFlag = 1;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <SysTik_voidSetIntervalms_Periodic+0x88>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
	switch(SysTik_CLOCK_SOURCE){
	case AHB_CLOCK:
		L_TimerFrequency = SysTik_AHB_CLOCK;
		break;
	case AHB_CLOCK_DIV_8:
		L_TimerFrequency = SysTik_AHB_CLOCK/AHB_PRESCALER;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <SysTik_voidSetIntervalms_Periodic+0x8c>)
 8000b36:	617b      	str	r3, [r7, #20]
		break;
 8000b38:	bf00      	nop
	}
	L_TickTime = (f32)MILLIS_IN_SECOND/(f32)L_TimerFrequency;
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	f7ff fbce 	bl	80002dc <__aeabi_ui2f>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4619      	mov	r1, r3
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <SysTik_voidSetIntervalms_Periodic+0x90>)
 8000b46:	f7ff fcd5 	bl	80004f4 <__aeabi_fdiv>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	613b      	str	r3, [r7, #16]
	L_Tick_No = A_u32Time_ms/L_TickTime;
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fbc4 	bl	80002dc <__aeabi_ui2f>
 8000b54:	4603      	mov	r3, r0
 8000b56:	6939      	ldr	r1, [r7, #16]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fccb 	bl	80004f4 <__aeabi_fdiv>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fd63 	bl	800062c <__aeabi_f2uiz>
 8000b66:	4603      	mov	r3, r0
 8000b68:	60fb      	str	r3, [r7, #12]

	SysTik->LOAD = L_Tick_No;
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <SysTik_voidSetIntervalms_Periodic+0x84>)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6053      	str	r3, [r2, #4]
	SysTik->VAL = ZERO;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <SysTik_voidSetIntervalms_Periodic+0x84>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]

	SysTik->CTRL |= (SysTik_INTERRUPT_STATUS << TICK_INT);
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <SysTik_voidSetIntervalms_Periodic+0x84>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <SysTik_voidSetIntervalms_Periodic+0x84>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6013      	str	r3, [r2, #0]
	SET_BIT(SysTik->CTRL,ENABLE);
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SysTik_voidSetIntervalms_Periodic+0x84>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SysTik_voidSetIntervalms_Periodic+0x84>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6013      	str	r3, [r2, #0]
	SysTik_GPFun = ptr;
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <SysTik_voidSetIntervalms_Periodic+0x94>)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	e000e010 	.word	0xe000e010
 8000ba0:	20000020 	.word	0x20000020
 8000ba4:	000f4240 	.word	0x000f4240
 8000ba8:	447a0000 	.word	0x447a0000
 8000bac:	2000001c 	.word	0x2000001c

08000bb0 <SysTick_Handler>:

void SysTik_voidStopTimer(void){
	CLR_BIT(SysTik->CTRL,ENABLE);
}

void SysTick_Handler(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	if(SysTik_GPFun != NULL){
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <SysTick_Handler+0x2c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00c      	beq.n	8000bd6 <SysTick_Handler+0x26>
		SysTik_GPFun();
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <SysTick_Handler+0x2c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4798      	blx	r3
		if(L_u8PeriodicFlag == 0){
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <SysTick_Handler+0x30>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d105      	bne.n	8000bd6 <SysTick_Handler+0x26>
			CLR_BIT(SysTik->CTRL,ENABLE);
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SysTick_Handler+0x34>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SysTick_Handler+0x34>)
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000001c 	.word	0x2000001c
 8000be0:	20000020 	.word	0x20000020
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <SysTik_ISR>:
#include "RCC_interface.h"
#include "GPIO_interface.h"
#include "NVIC_interface.h"
#include "SysTik_interface.h"

void SysTik_ISR(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

	GPIO_voidTogglePinValue(GPIO_PORTA,GPIO_PIN0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fec6 	bl	8000980 <GPIO_voidTogglePinValue>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <main>:

int main(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

	RCC_voidInitialize();
 8000bfc:	f7ff fefe 	bl	80009fc <RCC_voidInitialize>
	RCC_vEnablePeripheralClock(RCC_APB2,IOPA);
 8000c00:	2102      	movs	r1, #2
 8000c02:	2002      	movs	r0, #2
 8000c04:	f7ff ff3c 	bl	8000a80 <RCC_vEnablePeripheralClock>

	GPIO_voidSetPinMode(GPIO_PORTA,GPIO_PIN0,GPIO_DIRECTION_OUTPUT_10MHz,GP_PUSH_PULL_MODE);
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fd2c 	bl	800066c <GPIO_voidSetPinMode>
	GPIO_voidSetPinValue(GPIO_PORTA,GPIO_PIN0,GPIO_LOW);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe37 	bl	800088c <GPIO_voidSetPinValue>

	SysTik_voidInitialize();
 8000c1e:	f7ff ff69 	bl	8000af4 <SysTik_voidInitialize>
	SysTik_voidSetIntervalms_Periodic(1000,SysTik_ISR);
 8000c22:	4903      	ldr	r1, [pc, #12]	; (8000c30 <main+0x38>)
 8000c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c28:	f7ff ff76 	bl	8000b18 <SysTik_voidSetIntervalms_Periodic>

	while(1){
 8000c2c:	e7fe      	b.n	8000c2c <main+0x34>
 8000c2e:	bf00      	nop
 8000c30:	08000be9 	.word	0x08000be9

08000c34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c38:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	; (8000c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <LoopForever+0xe>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	; (8000c80 <LoopForever+0x16>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c62:	f000 f811 	bl	8000c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c66:	f7ff ffc7 	bl	8000bf8 <main>

08000c6a <LoopForever>:

LoopForever:
  b LoopForever
 8000c6a:	e7fe      	b.n	8000c6a <LoopForever>
  ldr   r0, =_estack
 8000c6c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c78:	08000cf0 	.word	0x08000cf0
  ldr r2, =_sbss
 8000c7c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c80:	20000024 	.word	0x20000024

08000c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_2_IRQHandler>
	...

08000c88 <__libc_init_array>:
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	4d0c      	ldr	r5, [pc, #48]	; (8000cc0 <__libc_init_array+0x38>)
 8000c8e:	4c0d      	ldr	r4, [pc, #52]	; (8000cc4 <__libc_init_array+0x3c>)
 8000c90:	1b64      	subs	r4, r4, r5
 8000c92:	10a4      	asrs	r4, r4, #2
 8000c94:	42a6      	cmp	r6, r4
 8000c96:	d109      	bne.n	8000cac <__libc_init_array+0x24>
 8000c98:	f000 f81a 	bl	8000cd0 <_init>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	4d0a      	ldr	r5, [pc, #40]	; (8000cc8 <__libc_init_array+0x40>)
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	; (8000ccc <__libc_init_array+0x44>)
 8000ca2:	1b64      	subs	r4, r4, r5
 8000ca4:	10a4      	asrs	r4, r4, #2
 8000ca6:	42a6      	cmp	r6, r4
 8000ca8:	d105      	bne.n	8000cb6 <__libc_init_array+0x2e>
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb0:	4798      	blx	r3
 8000cb2:	3601      	adds	r6, #1
 8000cb4:	e7ee      	b.n	8000c94 <__libc_init_array+0xc>
 8000cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cba:	4798      	blx	r3
 8000cbc:	3601      	adds	r6, #1
 8000cbe:	e7f2      	b.n	8000ca6 <__libc_init_array+0x1e>
 8000cc0:	08000ce8 	.word	0x08000ce8
 8000cc4:	08000ce8 	.word	0x08000ce8
 8000cc8:	08000ce8 	.word	0x08000ce8
 8000ccc:	08000cec 	.word	0x08000cec

08000cd0 <_init>:
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	bf00      	nop
 8000cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd6:	bc08      	pop	{r3}
 8000cd8:	469e      	mov	lr, r3
 8000cda:	4770      	bx	lr

08000cdc <_fini>:
 8000cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cde:	bf00      	nop
 8000ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ce2:	bc08      	pop	{r3}
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	4770      	bx	lr
